#!/bin/bash -e
#
# Potos iso generation script
#

# Load variable from yml file else set default
loadYmlVar (){
  val=$(yq eval -e "$1" /config/config.yml 2>/dev/null)
  if [ $? -eq 0 ]; then echo "$val"; else echo "${@:2}"; fi
}
# Load variables from yaml file, else set default
export POTOS_CLIENT_NAME=$(loadYmlVar '.client_name.long' "Potos Linux Client")
export POTOS_CLIENT_SHORTNAME=$(loadYmlVar '.client_name.short' "potos")
export POTOS_DISK_ENCRYPTION_ENABLE=$(loadYmlVar '.disk_encryption.enable' "false")
export POTOS_DISK_ENCRYPTION_INITIAL_PASSWORD=$(loadYmlVar '.disk_encryption.init_password' "install")
export POTOS_GIT_SPECS_URL=$(loadYmlVar '.specs.url' "https://github.com/projectpotos/")
export POTOS_GIT_SPECS_REPO=$(loadYmlVar '.specs.repo' "ansible-specs-potos")
export POTOS_GIT_SPECS_BRANCH=$(loadYmlVar '.specs.branch' "main")
export POTOS_GIT_SPECS_SSH_KEY=$(loadYmlVar '.specs.ssh_key' "")
export POTOS_GIT_SPECS_ANSIBLE_VAULT=$(loadYmlVar '.specs.ansible-vault-key-file' "")
export POTOS_INITIAL_HOSTNAME=$(loadYmlVar '.initial_hostname' "potoshostname01")
export POTOS_INITIAL_USERNAME=$(loadYmlVar '.initial_user.username' "admin")
export POTOS_INITIAL_PASSWORD_HASH=$(loadYmlVar '.initial_user.password' '$6$L36BiUuVCSipvlO8$oGI0C.LXZegkbftFkVDXXaasTM6zs9LM71BkqZToKw5aOZ7Yr70pkzH3P9Xz5R.n0ULJ0Zf8v5ZQ/eH8flDR7/')
export POTOS_ENV=$(loadYmlVar '.environment' "production")
export POTOS_RUNTYPE=$(loadYmlVar '.first_boot_ansible.runtype' "setup")
export POTOS_FULL_UNATTENDED=$(loadYmlVar '.full_unattended_install' "false")
export OUTPUT_ISO_FILENAME=$(loadYmlVar '.output.iso_filename' "${POTOS_CLIENT_SHORTNAME}-installer-${POTOS_ENV}.iso")
export POTOS_VERSION=$(loadYmlVar '.output.version' "$(date '+%Y%m%d')")
export INPUT_ISO_FILENAME=$(loadYmlVar '.input.iso_filename' "ubuntu-22.04.1-live-server-amd64.iso")
export INPUT_ISO_URL=$(loadYmlVar '.input.iso_url' "https://releases.ubuntu.com/22.04/ubuntu-22.04.1-live-server-amd64.iso")
export INPUT_ISO_SHA256_FILENAME=$(loadYmlVar '.input.iso_sha256_filename' "SHA256SUMS")
export INPUT_ISO_SHA256_URL=$(loadYmlVar '.input.iso_sha256_url' "https://releases.ubuntu.com/22.04/SHA256SUMS")
export POTOS_PRE_INSTALL_PACKAGES=$(loadYmlVar '.preinstall_packages[]' "python3-virtualenv" "linux-generic-hwe-22.04" "ubuntu-desktop" "plymouth-theme-ubuntu-logo" "ldap-utils" "yad")

# Temporary directory for iso build
TMP_DIR=iso

REQUIREMENTS="7z gfxboot xorriso wget curl sha256sum j2"

######
# Start with iso build
######

# Print environment info
if [[ ${POTOS_ENV} == "develop" ]]; then
  echo "*** POTOS_ENV is ${POTOS_ENV}, going to print some more informations for you:"
  printenv | grep -i potos
  echo "POTOS_PRE_INSTALL_PACKAGES="
  for t in ${POTOS_PRE_INSTALL_PACKAGES[@]}; do echo "- $t"; done
fi
echo "*** Going to build an ISO for ${POTOS_CLIENT_NAME} (${POTOS_ENV})"


# Check if required software is installed else install
for tool in ${REQUIREMENTS}; do
    if ! which "${tool}" > /dev/null; then
        echo "${tool} is missing!"
        exit 1
    fi
done

# If iso dir somehow exists, remove it
if [[ -d "${TMP_DIR}" ]]; then
  rm -rf "${TMP_DIR}"
fi

# If iso and checksum not exist, download them
if [[ ! -f "${INPUT_ISO_FILENAME}" ]]; then
  wget -nv --output-document="${INPUT_ISO_FILENAME}" "${INPUT_ISO_URL}"
fi
if [[ ! -f "${INPUT_ISO_SHA256_FILENAME}" ]]; then
  wget -nv --output-document="${INPUT_ISO_SHA256_FILENAME}" "${INPUT_ISO_SHA256_URL}"
fi

# Fail if no checksum exists
if ! sha256sum --ignore-missing --quiet -c "${INPUT_ISO_SHA256_FILENAME}"; then
  echo "sha256sum check failed"
  exit 1
fi

# extract iso into temporary directory
7z x "${INPUT_ISO_FILENAME}" -o"${TMP_DIR}"

# todo --> why?
# rm -rf "${TMP_DIR}/pool"

# make directory for files during autoinstall
mkdir "${TMP_DIR}/setup"

# copy Netplan into iso
cp "default-netplan.yml" "${TMP_DIR}/setup/default-netplan.yml"
# copy Gnome initial setup sudoers rule into iso
cp gnome-sudo "${TMP_DIR}/setup/gnome-sudo"

# template autoinstall files
export autoinstall_type="uefi"
mkdir -p "${TMP_DIR}/nocloud-uefi"
j2 autoinstall-meta-data.j2 > "${TMP_DIR}/nocloud-uefi/meta-data"
j2 autoinstall-user-data.j2 > "${TMP_DIR}/nocloud-uefi/user-data"
export autoinstall_type="bios"
mkdir -p "${TMP_DIR}/nocloud-bios"
j2 autoinstall-meta-data.j2 > "${TMP_DIR}/nocloud-bios/meta-data"
j2 autoinstall-user-data.j2 > "${TMP_DIR}/nocloud-bios/user-data"

# create version file
printf "${POTOS_CLIENT_NAME} ${POTOS_VERSION} (%s)\n" $(date +%Y%m%d-%H%M) > "${TMP_DIR}/setup/${POTOS_CLIENT_SHORTNAME}-version"

# remove boot config
rm -rf "${TMP_DIR}/[BOOT]"

# template grub config
j2 grub.cfg.j2 > "${TMP_DIR}/boot/grub/grub.cfg"

# copy logo into iso
if [ -f /config/logo.png ]; then
  cp logo.png "${TMP_DIR}/setup/logo.png"
else
  cp /config/logo.png "${TMP_DIR}/setup/logo.png"
fi

# copy ssh deploy key for specs repo into image
if [ -n "${POTOS_GIT_SPECS_SSH_KEY}" ] && [ -f "/config/${POTOS_GIT_SPECS_SSH_KEY}" ]; then
  cp "/config/${POTOS_GIT_SPECS_SSH_KEY}" "${TMP_DIR}/setup/specs_key"
fi
# copy ansible-vault key for specs repo into image
if [ -n "${POTOS_GIT_SPECS_ANSIBLE_VAULT}" ] && [ -f /config/${POTOS_GIT_SPECS_ANSIBLE_VAULT} ]; then
  cp "/config/${POTOS_GIT_SPECS_ANSIBLE_VAULT}" "${TMP_DIR}/setup/ansible_vault_key"
fi

# template diverse files for firstboot
j2 firstboot-gui.sh.j2 > "${TMP_DIR}/setup/firstboot-gui.sh" && chmod +x ${TMP_DIR}/setup/firstboot-gui.sh
j2 finish.sh.j2 > "${TMP_DIR}/setup/finish.sh" && chmod +x ${TMP_DIR}/setup/finish.sh
j2 change-keyboard-layout.j2 > "${TMP_DIR}/setup/change-keyboard-layout" && chmod +x ${TMP_DIR}/setup/change-keyboard-layout


# adjust md5sum checks
sed -i "s|${TMP_DIR}/|./|g" "${TMP_DIR}/md5sum.txt"

# Get efi partition infos
iso_bs=$(fdisk -l  ${INPUT_ISO_FILENAME} | grep 'Sector size' | tr -s ' ' | cut -d ' ' -f4)
iso_efi_skip=$(fdisk -l ${INPUT_ISO_FILENAME} | grep 'EFI' | tr -s ' ' | cut -d ' ' -f2)
iso_efi_size=$(fdisk -l ${INPUT_ISO_FILENAME} | grep 'EFI' | tr -s ' ' | cut -d ' ' -f4)

# define MBR
MBR_FILE=boot_hybrid.img

# write original MBR to MBR file
dd if=${INPUT_ISO_FILENAME} bs=1 count=432 of=${MBR_FILE}

# write original efi.img to file
dd if=${INPUT_ISO_FILENAME} bs=${iso_bs} skip=${iso_efi_skip} count=${iso_efi_size} of=efi.img

# xorriso
xorriso -as mkisofs -r -V "${POTOS_CLIENT_SHORTNAME}" \
-o ${OUTPUT_ISO_FILENAME} \
--grub2-mbr ${MBR_FILE} \
-partition_offset 16 \
--mbr-force-bootable \
-append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b efi.img \
-appended_part_as_gpt \
-iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \
-c '/boot.catalog' \
-b '/boot/grub/i386-pc/eltorito.img' \
-no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \
-eltorito-alt-boot \
-e '--interval:appended_partition_2:::' \
-no-emul-boot \
"${TMP_DIR}"

# remote temp directory
rm -rf "${TMP_DIR}"

# remote mbr
rm -f "${MBR_FILE}"

# Move iso to output directory
mv ${OUTPUT_ISO_FILENAME} /output/

# Generate checksum
if [[ -f /output/${OUTPUT_ISO_FILENAME} ]]; then
  sha256sum /output/${OUTPUT_ISO_FILENAME} > /output${OUTPUT_ISO_FILENAME}.sha256sum
fi
