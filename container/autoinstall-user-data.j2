#cloud-config
autoinstall:
  version: 1
  apt:
    preserve_sources_list: false
    primary:
      - arches: [default]
        uri: "http://archive.ubuntu.com/ubuntu"
  identity:
    hostname: {{ config['initial_hostname'] | default('potoshostname01') }}
    password: {{ config['initial_user']['password'] | default('$6$L36BiUuVCSipvlO8$oGI0C.LXZegkbftFkVDXXaasTM6zs9LM71BkqZToKw5aOZ7Yr70pkzH3P9Xz5R.n0ULJ0Zf8v5ZQ/eH8flDR7/') }}
    username: {{ config['initial_user']['username'] | default('admin') }}
{% if config['wifi'] is defined %}
  early-commands:
    - apt-get -y install wpasupplicant
  drivers:
    install: true
  network:
    # https://ubuntu.com/server/docs/install/autoinstall-reference#network
    # https://netplan.readthedocs.io/en/stable/netplan-yaml/#properties-for-device-type-wifis
    version: 2
    wifis:
      {{ config['wifi']['interface'] }}:
        access-points:
          "{{ config['wifi']['ssid'] }}":
            password: "{{ config['wifi']['pw'] }}"
        dhcp4: true
        dhcp6: true
{% endif %}
  ssh:
    allow-pw: true
    authorized-keys: []
    install-server: true
  storage:
    # https://ubuntu.com/server/docs/install/autoinstall-reference#storage
    # https://curtin.readthedocs.io/en/latest/topics/storage.html
    config:
      - id: disk_primary
        ptable: gpt
        wipe: superblock
        preserve: false
{% if autoinstall_type == 'bios' %}
        grub_device: true
{% endif %}
        type: disk
        match:
          size: largest
{% if autoinstall_type == 'bios' %}
      - id: partition_bios
        type: partition
        device: disk_primary
        size: 1MB
        flag: bios_grub
        preserve: false
        number: 1
{% endif %}
{% if autoinstall_type == 'uefi' %}
      - id: partition_efi
        type: partition
        device: disk_primary
        size: 512MB
        flag: boot
        grub_device: true
        preserve: false
        number: 1
{% endif %}
      - id: partition_boot
        type: partition
        device: disk_primary
        size: 1GB
        preserve: false
        number: 2
{% if config['disk_encryption']['enable']  is defined and config['disk_encryption']['enable']  == true %}
      - id: partition_crypt
        type: partition
        device: disk_primary
        size: -1
        preserve: false
        number: 3
      - id: dm-crypt_0
        volume: partition_crypt
        key: {{ config['disk_encryption']['init_password'] | default('install') }}
        preserve: false
        type: dm_crypt
      - id: lvm_volgroup_0
        name: ubuntu-vg
        devices: [dm-crypt_0]
        preserve: false
        type: lvm_volgroup
{% else %}
      - id: partition_main
        type: partition
        device: disk_primary
        size: -1
        preserve: false
        number: 3
      - id: lvm_volgroup_0
        name: ubuntu-vg
        devices: [partition_main]
        preserve: false
        type: lvm_volgroup
{% endif %}
      - id: lvm_volume_swap
        name: swap
        volgroup: lvm_volgroup_0
        size: 16G
        preserve: false
        type: lvm_partition
      - id: lvm_volume_root
        name: root
        volgroup: lvm_volgroup_0
        size: 50G
        preserve: false
        type: lvm_partition
{% if autoinstall_type == 'uefi' %}
      - id: format_efi
        fstype: fat32
        volume: partition_efi
        preserve: false
        type: format 
{% endif %}
      - id: format_boot
        fstype: ext4
        volume: partition_boot
        preserve: false
        type: format
      - id: format_swap
        fstype: swap
        volume: lvm_volume_swap
        preserve: false
        type: format
      - id: format_root
        fstype: ext4
        volume: lvm_volume_root
        preserve: false
        type: format
{% if autoinstall_type == 'uefi' %}
      - id: mount_efi
        device: format_efi
        path: /boot/efi
        type: mount
{% endif %}
      - id: mount_boot
        device: format_boot
        path: /boot
        type: mount
      - id: mount_root
        device: format_root
        path: /
        type: mount
  late-commands:
    - curtin in-target --target=/target -- apt update
{% for package in config['packages']['preinstall']  %}
    - curtin in-target --target=/target -- apt install {{ package }} -y
{% endfor %}
    - |
      for arg in $(cat /proc/cmdline); do
        case "${arg}" in
          POTOS_INSTALL=*)
            echo "${arg}" > /target/POTOS_INSTALL
            ;;
        esac
      done
    - sed -ie 's|GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT="quiet splash gnome.initial-setup=1 systemd.debug_shell"|' /target/etc/default/grub
    - rm -f /target/etc/netplan/*
    - cp /cdrom/setup/default-netplan.yml /target/etc/netplan/01-network-manager-all.yaml
    - cp /cdrom/setup/gnome-sudo /target/etc/sudoers.d/01_gnome-initial-setup
    - mkdir -p /target/etc/potos/ && chown 0:0 /target/etc/potos/ && chmod 0700 /target/etc/potos/
{% if config['specs']['ssh_key'] != "" %}
    - cp /cdrom/setup/specs_key /target/etc/potos/specs_key && chown 0:0 /target/etc/potos/specs_key && chmod 0400 /target/etc/potos/specs_key 
{% endif %}
{% if config['specs']['ansible_vault_key_file'] != "" %}
    - cp /cdrom/setup/ansible_vault_key /target/etc/potos/ansible_vault_key && chown 0:0 /target/etc/potos/ansible_vault_key && chmod 0500 /target/etc/potos/ansible_vault_key 
{% endif %}
    - cp -r /cdrom/setup /target/setup
    - curtin in-target --target=/target -- ln -sf /setup/firstboot-gui.sh /usr/libexec/gnome-initial-setup
    - curtin in-target --target=/target -- update-grub

# vim: filetype=yaml
